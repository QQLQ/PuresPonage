#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int btoi(char *bline);
char* itob(int res,char *line);

int main(int argc,char *argv[])
{ 
  char line[33];

  if (argc!=3)
    {
    printf("Usage:%s [bis] [bis]\n",argv[0]);
    exit(EXIT_FAILURE);
    }

  char b1[strlen(argv[1])+1],b2[strlen(argv[2])+1];
  int i;
    for (i=0;argv[1][i];i++)
       b1[i]=1^(argv[1][i]-'0')+'0';
       b1[i]='\0';               
    for (i=0;argv[2][i];i++)
       b2[i]=1^(argv[2][i]-'0')+'0';
       b2[i]='\0';               
printf("~%s=%s,~%s=%s\n",argv[1],b1,argv[2],b2);
printf("%s&%s=%s\n",argv[1],argv[2],itob(btoi(argv[1])&btoi(argv[2]),line) );
printf("%s|%s=%s\n",argv[1],argv[2],itob(btoi(argv[1])|btoi(argv[2]),line) );
printf("%s^%s=%s\n",argv[1],argv[2],itob(btoi(argv[1])^btoi(argv[2]),line) );


return 0;
}

int btoi(char *bline)
{
   char*p;
   int tot=0;
   p=bline;

   while (*p)
    {
     tot<<=1;
     tot|=*p++-'0';
    }
return tot;
}
    
char* itob(int res,char *line)
{  
  int n,i;

  for (i=1,n=1;i<=res;i<<=1,n++);

  line[n-1]='\0';
  i=n-2; 
  while (res>0)
   {
    line[i]=(res&1)+'0';
    res>>=1;
    i--;
   }
return line;
}

//This version is not that satisfying, since itob cant deal with minus number.
//Basically, if btoi resturns a minus number,then itob will just boom...but i do like the way it works.
//So i am gonna get myself a better version later.
